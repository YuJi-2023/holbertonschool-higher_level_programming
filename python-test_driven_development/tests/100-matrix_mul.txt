The ``matrix_mul`` module
======================

Using ``matrix_mul``
-------------------

Import ``matrix_mul``:
    >>> matrix_mul = __import__('100-matrix_mul').matrix_mul

We are testing it in the following cases:

    normal case:
    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
    [[7, 10], [15, 22]]

    case: empty m_a
    >>> matrix_mul([], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ...
    ValueError: m_a can't be empty

    case: empty m_a[]
    >>> matrix_mul([[]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ...
    ValueError: m_a can't be empty

    case: empty m_b
    >>> matrix_mul([[1, 2], [3, 4]], [])
    Traceback (most recent call last):
    ...
    ValueError: m_b can't be empty

    case: empty m_b[]
    >>> matrix_mul([[1, 2], [3, 4]], [[]])
    Traceback (most recent call last):
    ...
    ValueError: m_b can't be empty

    case: m_a not list
    >>> matrix_mul(5, [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ...
    TypeError: m_a must be a list

    case: m_b not list
    >>> matrix_mul([[1, 2], [3, 4]], 5)
    Traceback (most recent call last):
    ...
    TypeError: m_b must be a list

    case: m_a not list of lists
    >>> matrix_mul([2, 3],[[1, 2],[3, 4]])
    Traceback (most recent call last):
    ...
    TypeError: m_a must be a list of lists

    case: m_b not list of lists
    >>> matrix_mul([[1, 2],[3, 4]], [2, 3])
    Traceback (most recent call last):
    ...
    TypeError: m_b must be a list of lists

    case: m_a contains string
    >>> matrix_mul([[1, 'b'],[2, 3]], [[2, 3], [4, 5]])
    Traceback (most recent call last):
    ...
    TypeError: m_a should contain only integers or floats

    case: m_b contains string
    >>> matrix_mul([[2, 3], [4, 5]], [['b', 1],[3, 4]])
    Traceback (most recent call last):
    ...
    TypeError: m_b should contain only integers or floats

    case: m_a rows of different size
    >>> matrix_mul([[1, 2, 5, 6],[3, 4]], [[1, 3], [2, 3]])
    Traceback (most recent call last):
    ...
    TypeError: each row of m_a must be of the same size

    case: m_b rows of different size
    >>> matrix_mul([[1, 2], [3, 4]], [[1], [2, 3]])
    Traceback (most recent call last):
    ...
    TypeError: each row of m_b must be of the same size

    case: m_a's row differ from m_b's col
    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2, 3], [2, 3, 4], [5, 6, 7]])
    Traceback (most recent call last):
    ...
    ValueError: m_a and m_b can't be multiplied

    case: miss one argument
    >>> matrix_mul([[1, 2], [3, 4]])
    Traceback (most recent call last):
    ...
    TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

    case: miss two argument
    >>> matrix_mul()
    Traceback (most recent call last):
    ...
    TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
